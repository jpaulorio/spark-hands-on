import org.apache.spark._
import org.apache.spark.streaming._
import org.apache.log4j.Logger
import org.apache.log4j.Level


object StatefulStreamingExample {

    def main(args: Array[String]) {
        
        Logger.getLogger("org").setLevel(Level.OFF)
        Logger.getLogger("akka").setLevel(Level.OFF)

        val conf = new SparkConf().setMaster("local[2]").setAppName("Stateful Streaming Example")

        // Create the context with a 1 second batch size   
        val ssc = new StreamingContext(conf, Seconds(1))
        ssc.checkpoint(".")

        val updateFunc = (values: Seq[Int], state: Option[Int]) => {
          val currentCount = values.sum

          val previousCount = state.getOrElse(0)

          Some(currentCount + previousCount)
        }

        val newUpdateFunc = (iterator: Iterator[(String, Seq[Int], Option[Int])]) => {
          iterator.flatMap(t => updateFunc(t._2, t._3).map(s => (t._1, s)))
        }
        
        // Initial RDD input to updateStateByKey
        val initialRDD = ssc.sparkContext.parallelize(List(("hello", 1), ("world", 1)))

        // Create a ReceiverInputDStream on target ip:port and count the
        // words in input stream of \n delimited test (eg. generated by 'nc')
        val lines = ssc.socketTextStream("localhost", 9999)
        val words = lines.flatMap(_.split(" "))
        val wordDstream = words.map(x => (x, 1))

        // Update the cumulative count using updateStateByKey
        // This will give a Dstream made of state (which is the cumulative count of the words)
        val stateDstream = wordDstream.updateStateByKey[Int](newUpdateFunc,
          new HashPartitioner (ssc.sparkContext.defaultParallelism), true, initialRDD)
        stateDstream.print()
 
        ssc.start()
        ssc.awaitTermination()

    }
}